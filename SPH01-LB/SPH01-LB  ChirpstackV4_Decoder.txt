function decodeUplink(input) {
        return { 
            data: Decode(input.fPort, input.bytes, input.variables)
        };   
}
function datalog(i,bytes){
  var aa= (bytes[0+i]<<8 | bytes[1+i])/10;
  var bb= (bytes[2+i]<<8 | bytes[3+i])/10;
  var cc= (bytes[4+i]<<8 | bytes[5+i])/10;   
  var dd= (bytes[6+i]) ;
  var ee= getMyDate((bytes[7+i]<<24 | bytes[8+i]<<16 | bytes[9+i]<<8 | bytes[10+i]).toString(10));
  var string='['+'PH'+':'+aa+','+'Temperature'+':'+bb+','+'DS18B20_Temperature'+':'+cc+','+'s_flag'+':'+dd+','+'time '+':'+ee+']'+',';  
  
  return string;
}

function getzf(c_num){ 
  if(parseInt(c_num) < 10)
    c_num = '0' + c_num; 

  return c_num; 
}

function getMyDate(str){ 
  var c_Date;
  if(str > 9999999999)
    c_Date = new Date(parseInt(str));
  else 
    c_Date = new Date(parseInt(str) * 1000);
  
  var c_Year = c_Date.getFullYear(), 
  c_Month = c_Date.getMonth()+1, 
  c_Day = c_Date.getDate(),
  c_Hour = c_Date.getHours(), 
  c_Min = c_Date.getMinutes(), 
  c_Sen = c_Date.getSeconds();
  var c_Time = c_Year +'-'+ getzf(c_Month) +'-'+ getzf(c_Day) +' '+ getzf(c_Hour) +':'+ getzf(c_Min) +':'+getzf(c_Sen); 
  
  return c_Time;
}

function Decode(fPort, bytes, variables) {
  if(fPort==0x02)
  {
    var value=(bytes[0]<<8 | bytes[1]) & 0x3FFF;
	var batV=value/1000;//Battery,units:V

	value=bytes[2]<<8 | bytes[3];
	if(bytes[2] & 0x80)
	{value |= 0xFFFF0000;}
	var temp_DS18B20=(value/10).toFixed(2);//DS18B20,temperature
   
	value=bytes[4]<<8 | bytes[5];
	var PH1=(value/100).toFixed(2);		
  
	value=bytes[6]<<8 | bytes[7];
	var temp=0;	
    if((value & 0x8000)>>15 === 0)
		temp=(value/10).toFixed(2);//temp_SOIL,temperature
	else if((value & 0x8000)>>15 === 1)
		temp=((value-0xFFFF)/10).toFixed(2);	
   
	var i_flag = bytes[8];
	var mes_type = bytes[10];
   
    if(bytes.length==11)
    return {
       Bat:batV,
       TempC_DS18B20:temp_DS18B20,
       PH1_SOIL:PH1,
       TEMP_SOIL:temp,
	   Interrupt_flag:i_flag,
	   Message_type:mes_type
  };
  }
  else if(fPort==0x03)  
  {
    
    for(var i=0;i<bytes.length;i=i+11)
    {
      var data= datalog(i,bytes);
      if(i=='0')
        data_sum=data;
      else
        data_sum+=data;
    }
    return{
    DATALOG:data_sum,
    
    };    
  }  
  else if(fPort==0x05)
  {
  	var freq_band;
  	var sub_band;
    var sensor;
    
    if(bytes[0]==0x03)
      sensor= "SE01-LB";
      
	  var firm_ver= (bytes[3]);
	  
    if(bytes[1]==0x01)
        freq_band="EU868";
  	else if(bytes[1]==0x02)
        freq_band="US915";
  	else if(bytes[1]==0x03)
        freq_band="IN865";
  	else if(bytes[1]==0x04)
        freq_band="AU915";
  	else if(bytes[1]==0x05)
        freq_band="KZ865";
  	else if(bytes[1]==0x06)
        freq_band="RU864";
  	else if(bytes[1]==0x07)
        freq_band="AS923";
  	else if(bytes[1]==0x08)
        freq_band="AS923_1";
  	else if(bytes[1]==0x09)
        freq_band="AS923_2";
  	else if(bytes[1]==0x0A)
        freq_band="AS923_3";
  	else if(bytes[1]==0x0F)
        freq_band="AS923_4";
  	else if(bytes[1]==0x0B)
        freq_band="CN470";
  	else if(bytes[1]==0x0C)
        freq_band="EU433";
  	else if(bytes[1]==0x0D)
        freq_band="KR920";
  	else if(bytes[1]==0x0E)
        freq_band="MA869";
  	
    if(bytes[2]==0xff)
      sub_band="NULL";
	  else
      sub_band=bytes[2];

   var sensor_type= (bytes[4]);
	  
    if(bytes[4]==0x01)
        sensor_type="LSE01";
  	else if(bytes[4]==0x02)
        sensor_type="LDDS75";
  	else if(bytes[4]==0x03)
        sensor_type="LDDS20";
  	else if(bytes[4]==0x04)
        sensor_type="LLMS01";
  	else if(bytes[4]==0x05)
        sensor_type="LSPH01";
  	else if(bytes[4]==0x06)
        sensor_type="LSNPK01";
  	else if(bytes[4]==0x07)
        sensor_type="LDDS45";
    else if(bytes[4]==0x08)
        sensor_type="LSLP01";
	else if(bytes[4]==0x18)
        sensor_type="LMDS120";
	
        
        
       var Message_Type 
    if(bytes[10]==0x02)
      Message_Type="right";
	  else
      Message_Type="error";
    
  	return {
  	  SENSOR_MODEL:sensor,
      FIRMWARE_VERSION:firm_ver,
      FREQUENCY_BAND:freq_band,
      SUB_BAND:sub_band,
      sensor_type:sensor_type,
      Message_Type:Message_Type,
  	}
  }  
}