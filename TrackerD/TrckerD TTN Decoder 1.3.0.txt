/*function Decoder(bytes, port) {
// Decode an uplink message from a buffer
// (array) of bytes to an object of fields.
var value=bytes[0]<<16 | bytes[1]<<8 | bytes[2];
if(bytes[0] & 0x80)
{
value |=0xFFFFFF000000;
}
var latitude=value/10000;//gps latitude,units: °
value=bytes[3]<<16 | bytes[4]<<8 | bytes[5];
if(bytes[3] & 0x80)
{
value |=0xFFFFFF000000;
}
var longitude=value/10000;//gps longitude,units: °
var alarm=(bytes[6] & 0x40)?"TRUE":"FALSE";//Alarm status
value=((bytes[6] & 0x3f) <<8) | bytes[7];
var batV=value/1000;//Battery,units:V
value=bytes[8]<<8 | bytes[9];
if(bytes[8] & 0x80)
{
value |=0xFFFF0000;
}
var roll=value/100;//roll,units: °
value=bytes[10]<<8 | bytes[11];
if(bytes[10] & 0x80)
{
value |=0xFFFF0000;
}
var pitch=value/100; //pitch,units: °
return {
Latitude: latitude,
Longitud: longitude,
Roll: roll,
Pitch:pitch,
BatV:batV,
ALARM_status:alarm,
};
}*/
//The function is :
function Decoder(bytes, port) {
// Decode an uplink message from a buffer
// (array) of bytes to an object of fields.
	var i;
	var con;
	var str = "";
	var major = 1;
	var minor = 1;
	var rssi = 0;
	var power = 0;
	var device_information1 = 0;
	var device_information2 = 0;
	var device_information3 = 0;
	var addr = "";
  var alarm=0;//Alarm status
  var batV=0;//Battery,units:V
  var bat=0;//Battery,units:V
  var mod = 0;
  var led_updown="";//LED status for position,uplink and downlink
//  var Firmware = 0;  // Firmware version; 5 bits   
  var hum=0;//hum,units: °
  var tem=0; //tem,units: °  
  var latitude=0;//gps latitude,units: °  
  var longitude = 0;//gps longitude,units: ° 
  var location=0;
  var sub_band;
  var freq_band;
  var sensor; 
  var firm_ver;
  
if(port == 2 || port == 3)
{
 bat=(((bytes[8] & 0x3f) <<8) | bytes[9])/1000;//Battery,units:V

  if(bytes[0] !== 0)
  {
    latitude=(bytes[0]<<24 | bytes[1]<<16 | bytes[2]<<8 | bytes[3])/1000000;//gps latitude,units: °
  }
  else
  {
    latitude=0;//gps latitude,units: °
  }
  if(bytes[4] !== 0)
  {
    longitude=(bytes[4]<<24 | bytes[5]<<16 | bytes[6]<<8 | bytes[7])/1000000;//gps longitude,units: °
  }
  else
  {
   longitude=0;//gps longitude,units: °
  }

 if( bat !== 2.022)
 {
    alarm=(bytes[8] & 0x40)?"TRUE":"FALSE";//Alarm status
    batV=(((bytes[8] & 0x3f) <<8) | bytes[9])/1000;//Battery,units:V
    mod = bytes[10] & 0xC0;
  /*  if(bytes[10] & 0xC0==0x40)
    {
      var motion_mode="Move";
    }
    else if(bytes[10] & 0xC0 ==0x80)
    {
      motion_mode="Collide";
    }
    else if(bytes[10] & 0xC0 ==0xC0)
    {
      motion_mode="User";
    }
    else
    {
      motion_mode="Disable";
    }                                            //mode of motion
  */  
    if(mod !== 1) 
    {
     hum=(bytes[11]<<8 | bytes[12])/10;//hum,units: °
     tem=(bytes[13]<<8 | bytes[14])/10; //tem,units: °   
    }
    led_updown=(bytes[10] & 0x20)?"ON":"OFF";//LED status for position,uplink and downlink
//    Firmware = 10+(bytes[10] & 0x1f);  // Firmware version; 5 bits 
 }
}
if(port==0x05)
  {
    if(bytes[0]==0x0A)
       sensor= "GPS";
    else if(bytes[0]==0x0E)
       sensor= "BLE"; 
    else if(bytes[0]==0x0C)
       sensor= "Spots";         
     else if(bytes[0]==0x0B)
       sensor= "BLE+GPS Hybrid";        
       
    if(bytes[4]==0xff)
      sub_band="NULL";
    else
      sub_band=bytes[4];
    
    if(bytes[3]==0x01)
      freq_band="EU868";
    else if(bytes[3]==0x02)
      freq_band="US915";
    else if(bytes[3]==0x03)
      freq_band="IN865";
    else if(bytes[3]==0x04)
      freq_band="AU915";
    else if(bytes[3]==0x05)
      freq_band="KZ865";
    else if(bytes[3]==0x06)
      freq_band="RU864";
    else if(bytes[3]==0x07)
      freq_band="AS923";
    else if(bytes[3]==0x08)
      freq_band="AS923_1";
    else if(bytes[3]==0x09)
      freq_band="AS923_2";
    else if(bytes[3]==0x0A)
      freq_band="AS923_3";
    else if(bytes[3]==0x0B)
      freq_band="CN470";
    else if(bytes[3]==0x0C)
      freq_band="EU433";
    else if(bytes[3]==0x0D)
      freq_band="KR920";
    else if(bytes[3]==0x0E)
      freq_band="MA869";
      
   firm_ver= (bytes[1]&0x0f)+'.'+(bytes[2]>>4&0x0f)+'.'+(bytes[2]&0x0f);
   batV= (bytes[5]<<8 | bytes[6])/1000;
  }
if(port == 10)
{
  if(bytes[0] !== 0)
  {
    latitude=(bytes[0]<<24 | bytes[1]<<16 | bytes[2]<<8 | bytes[3])/1000000;//gps latitude,units: °
  }
  else
  {
    latitude=0;//gps latitude,units: °
  }
  if(bytes[4] !== 0)
  {
    longitude=(bytes[4]<<24 | bytes[5]<<16 | bytes[6]<<8 | bytes[7])/1000000;//gps longitude,units: °
  }
  else
  {
   longitude=0;//gps longitude,units: °
  }  
}

 if ((latitude < 190) && (latitude > -190)) {
        if ((longitude < 190) && (longitude > -190)) {
            if ((latitude !== 0) && (longitude !==0)) {
                    field: "location",
                  location= "(" + latitude + "," + longitude + ")"
            
            }        
       }
    }
    
    
if(port == 4)
{

}
if(port == 6)
{
		major =  bytes[17];
		
		minor =  bytes[19];
		
		power = bytes[20] << 8 | bytes[21];
		
		rssi =  bytes[23]<<24>>24;

		con = "";
		for(i = 0 ; i < 16 ; i++) {
		  	con += bytes[i].toString(16);
		  	
		}
		value =  con;
	var uuid = value;	
  alarm=(bytes[24] & 0x40)?"TRUE":"FALSE";//Alarm status
  batV=(((bytes[24] & 0x3f) <<8) | bytes[25])/1000;//Battery,units:V
  mod = (bytes[26] & 0xC0)>>6;
/*  if(bytes[10] & 0xC0==0x40)
  {
    var motion_mode="Move";
  }
  else if(bytes[10] & 0xC0 ==0x80)
  {
    motion_mode="Collide";
  }
  else if(bytes[10] & 0xC0 ==0xC0)
  {
    motion_mode="User";
  }
  else
  {
    motion_mode="Disable";
  }                                            //mode of motion
*/  
  led_updown=(bytes[26] & 0x20)?"ON":"OFF";//LED status for position,uplink and downlink
  Firmware = 100+(bytes[26] & 0x1f);  // Firmware version; 5 bits 
  if(bytes[26] & 0xC0==0x40) 
  {
   hum=(bytes[27]<<8 | bytes[28])/10;//hum,units: °
   tem=(bytes[29]<<8 | bytes[30])/10; //tem,units: °
  }	
	}

return {
Location: location,
Latitude: latitude,
Longitud: longitude,
Hum:hum,
Tem:tem,
BatV:batV,
ALARM_status:alarm,
MD:mod,
LON:led_updown,
//FW:Firmware,
UUID: uuid,
ADDR: addr,
MAJOR: major,
MINOR: minor,
RSSI:rssi,
POWER:power,
Dvice_Information1:device_information1,
Dvice_Information2:device_information2,
Dvice_Information3:device_information3,
SENSOR_MODEL:sensor,
FIRMWARE_VERSION:firm_ver,
FREQUENCY_BAND:freq_band,
SUB_BAND:sub_band,
};
}